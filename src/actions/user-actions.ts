"use server";

import { auth } from "@clerk/nextjs/server";
import { revalidatePath } from "next/cache";
import { createAuditLog } from "@/lib/db-utils";
import { currentUser } from "@clerk/nextjs/server";
import { giveWelcomeBonus, giveFirstMonthCredits } from "./credit-actions";
import { prisma } from "@/lib/prisma";

/**
 * Busca usu√°rio por Clerk ID
 */
export async function getUserByClerkId(clerkId: string) {
  try {
    const user = await prisma.user.findUnique({
      where: { clerkId },
      include: {
        plan: true,
        projects: {
          select: {
            id: true,
            name: true,
            createdAt: true,
            updatedAt: true,
          },
          orderBy: { updatedAt: "desc" },
          take: 5, // √öltimos 5 projetos
        },
        _count: {
          select: {
            projects: true,
            executions: true,
            templates: true,
          },
        },
      },
    });

    return user;
  } catch (error) {
    console.error("Erro ao buscar usu√°rio:", error);
    throw new Error("Falha ao buscar usu√°rio");
  }
}

/**
 * Garante que o usu√°rio existe no banco de dados
 * Resolve problema de timing entre Clerk e webhook
 */
export async function ensureUserExists() {
  try {
    const { userId } = await auth();

    if (!userId) {
      throw new Error("Usu√°rio n√£o autenticado");
    }

    // Buscar dados do Clerk
    const clerkUser = await currentUser();

    if (!clerkUser) {
      throw new Error("Usu√°rio n√£o encontrado no Clerk");
    }

    // Buscar plano gratuito
    const freePlan = await prisma.plan.findUnique({
      where: { name: "free" },
    });

    if (!freePlan) {
      throw new Error("Plano gratuito n√£o encontrado");
    }

    // Usar upsert para evitar race condition
    const user = await prisma.user.upsert({
      where: { clerkId: userId },
      update: {
        // Atualizar dados se o usu√°rio j√° existe
        email: clerkUser.emailAddresses[0]?.emailAddress || "",
        name: clerkUser.fullName,
        imageUrl: clerkUser.imageUrl,
      },
      create: {
        // Criar usu√°rio se n√£o existe
        clerkId: userId,
        email: clerkUser.emailAddresses[0]?.emailAddress || "",
        name: clerkUser.fullName,
        imageUrl: clerkUser.imageUrl,
        planId: freePlan.id,
        credits: freePlan.credits,
      },
      include: { plan: true },
    });

    // Verificar se √© um usu√°rio novo (sem cr√©ditos de b√¥nus ainda)
    const isNewUser = user.credits === freePlan.credits;

    if (isNewUser) {
      console.log(`‚úÖ Novo usu√°rio criado: ${userId}`);

      // Log de auditoria apenas para novos usu√°rios
      await createAuditLog("create", "user", user.id, user.id, {
        clerkId: userId,
        email: user.email,
        source: "ensure_user_exists",
      });

      // Aplicar cr√©ditos de boas-vindas e primeiro m√™s apenas para novos usu√°rios
      try {
        // Aplicar b√¥nus de boas-vindas (15 cr√©ditos)
        const bonusResult = await giveWelcomeBonus(userId);
        if (bonusResult) {
          console.log(`‚úÖ B√¥nus de boas-vindas aplicado via ensureUserExists: ${userId}`);
        }

        // Aplicar cr√©ditos do primeiro m√™s (20 cr√©ditos)
        const firstMonthResult = await giveFirstMonthCredits(userId);
        if (firstMonthResult) {
          console.log(`‚úÖ Cr√©ditos do primeiro m√™s aplicados via ensureUserExists: ${userId}`);
          console.log(`üéØ Total de cr√©ditos: ${firstMonthResult.user.credits}`);
        }
      } catch (creditError) {
        console.error("‚ùå Erro ao aplicar cr√©ditos via ensureUserExists:", creditError);
        // N√£o falhar a cria√ß√£o do usu√°rio por causa dos cr√©ditos
      }
    } else {
      console.log(`‚úÖ Usu√°rio existente encontrado: ${userId}`);
    }

    return user;
  } catch (error) {
    console.error("Erro ao garantir exist√™ncia do usu√°rio:", error);
    throw new Error("Falha ao garantir exist√™ncia do usu√°rio");
  }
}

/**
 * Cria um novo usu√°rio no banco (ou retorna existente se j√° existe)
 */
export async function createUser(data: {
  clerkId: string;
  email: string;
  name?: string | null;
  imageUrl?: string | null;
}) {
  try {
    // Verificar se o usu√°rio j√° existe
    const existingUser = await prisma.user.findUnique({
      where: { clerkId: data.clerkId },
      include: { plan: true },
    });

    if (existingUser) {
      console.log(`‚úÖ Usu√°rio j√° existe: ${data.clerkId}`);
      return existingUser;
    }

    // Buscar plano gratuito
    const freePlan = await prisma.plan.findUnique({
      where: { name: "free" },
    });

    if (!freePlan) {
      throw new Error("Plano gratuito n√£o encontrado");
    }

    const user = await prisma.user.create({
      data: {
        clerkId: data.clerkId,
        email: data.email,
        name: data.name,
        imageUrl: data.imageUrl,
        planId: freePlan.id,
        credits: freePlan.credits,
      },
      include: { plan: true },
    });

    console.log(`‚úÖ Novo usu√°rio criado: ${data.clerkId}`);

    // Log de auditoria
    await createAuditLog("create", "user", user.id, user.id, {
      clerkId: data.clerkId,
      email: data.email,
      source: "user_action",
    });

    revalidatePath("/settings");
    revalidatePath("/dashboard");

    return user;
  } catch (error) {
    console.error("Erro ao criar usu√°rio:", error);
    throw new Error("Falha ao criar usu√°rio");
  }
}

/**
 * Atualiza dados do usu√°rio
 */
export async function updateUser(data: {
  clerkId: string;
  email?: string;
  name?: string | null;
  imageUrl?: string | null;
}) {
  try {
    const user = await prisma.user.update({
      where: { clerkId: data.clerkId },
      data: {
        ...(data.email && { email: data.email }),
        ...(data.name !== undefined && { name: data.name }),
        ...(data.imageUrl !== undefined && { imageUrl: data.imageUrl }),
      },
      include: { plan: true },
    });

    // Log de auditoria
    await createAuditLog("update", "user", user.id, user.id, {
      clerkId: data.clerkId,
      updatedFields: Object.keys(data).filter((key) => key !== "clerkId"),
      source: "user_action",
    });

    revalidatePath("/settings");
    revalidatePath("/dashboard");

    return user;
  } catch (error) {
    console.error("Erro ao atualizar usu√°rio:", error);
    throw new Error("Falha ao atualizar usu√°rio");
  }
}

/**
 * Exclui usu√°rio do banco
 */
export async function deleteUser(clerkId: string) {
  try {
    const user = await prisma.user.findUnique({
      where: { clerkId },
    });

    if (!user) {
      throw new Error("Usu√°rio n√£o encontrado");
    }

    // Log de auditoria antes de excluir
    await createAuditLog("delete", "user", user.id, user.id, {
      clerkId,
      email: user.email,
      source: "user_action",
    });

    await prisma.user.delete({
      where: { clerkId },
    });

    revalidatePath("/settings");
    revalidatePath("/dashboard");

    return { success: true };
  } catch (error) {
    console.error("Erro ao excluir usu√°rio:", error);
    throw new Error("Falha ao excluir usu√°rio");
  }
}

/**
 * Atualiza perfil do usu√°rio autenticado
 */
export async function updateProfile(data: { name?: string }) {
  try {
    const { userId } = await auth();

    if (!userId) {
      throw new Error("Usu√°rio n√£o autenticado");
    }

    if (data.name && (data.name.length < 2 || data.name.length > 100)) {
      throw new Error("Nome deve ter entre 2 e 100 caracteres");
    }

    const user = await prisma.user.update({
      where: { clerkId: userId },
      data: {
        ...(data.name && { name: data.name }),
      },
      include: { plan: true },
    });

    // Log de auditoria
    await createAuditLog("update", "user", user.id, user.id, {
      updatedFields: ["name"],
      source: "profile_update",
    });

    revalidatePath("/settings");

    return user;
  } catch (error) {
    console.error("Erro ao atualizar perfil:", error);
    throw new Error("Falha ao atualizar perfil");
  }
}

/**
 * Deduz cr√©ditos do usu√°rio
 */
export async function deductCredits(clerkId: string, amount: number) {
  try {
    const user = await prisma.user.findUnique({
      where: { clerkId },
    });

    if (!user) {
      throw new Error("Usu√°rio n√£o encontrado");
    }

    if (user.credits < amount) {
      throw new Error("Cr√©ditos insuficientes");
    }

    const updatedUser = await prisma.user.update({
      where: { clerkId },
      data: {
        credits: {
          decrement: amount,
        },
      },
      include: { plan: true },
    });

    // Log de auditoria
    await createAuditLog("update", "user", user.id, user.id, {
      action: "deduct_credits",
      amount,
      previousCredits: user.credits,
      newCredits: updatedUser.credits,
      source: "credit_deduction",
    });

    revalidatePath("/dashboard");

    return updatedUser;
  } catch (error) {
    console.error("Erro ao deduzir cr√©ditos:", error);
    throw new Error("Falha ao deduzir cr√©ditos");
  }
}

/**
 * Adiciona cr√©ditos ao usu√°rio
 */
export async function addCredits(clerkId: string, amount: number) {
  try {
    const user = await prisma.user.findUnique({
      where: { clerkId },
    });

    if (!user) {
      throw new Error("Usu√°rio n√£o encontrado");
    }

    const updatedUser = await prisma.user.update({
      where: { clerkId },
      data: {
        credits: {
          increment: amount,
        },
      },
      include: { plan: true },
    });

    // Log de auditoria
    await createAuditLog("update", "user", user.id, user.id, {
      action: "add_credits",
      amount,
      previousCredits: user.credits,
      newCredits: updatedUser.credits,
      source: "credit_addition",
    });

    revalidatePath("/dashboard");

    return updatedUser;
  } catch (error) {
    console.error("Erro ao adicionar cr√©ditos:", error);
    throw new Error("Falha ao adicionar cr√©ditos");
  }
}

/**
 * Atualiza plano do usu√°rio
 */
export async function updateUserPlan(clerkId: string, planId: string) {
  try {
    const [user, plan] = await Promise.all([
      prisma.user.findUnique({ where: { clerkId } }),
      prisma.plan.findUnique({ where: { id: planId } }),
    ]);

    if (!user) {
      throw new Error("Usu√°rio n√£o encontrado");
    }

    if (!plan) {
      throw new Error("Plano n√£o encontrado");
    }

    const updatedUser = await prisma.user.update({
      where: { clerkId },
      data: {
        planId: plan.id,
        credits: plan.credits, // Resetar cr√©ditos para o novo plano
      },
      include: { plan: true },
    });

    // Log de auditoria
    await createAuditLog("update", "user", user.id, user.id, {
      action: "plan_change",
      previousPlanId: user.planId,
      newPlanId: plan.id,
      planName: plan.name,
      source: "plan_update",
    });

    revalidatePath("/dashboard");
    revalidatePath("/settings");

    return updatedUser;
  } catch (error) {
    console.error("Erro ao atualizar plano:", error);
    throw new Error("Falha ao atualizar plano");
  }
}
